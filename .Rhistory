ppois(10,15)
?ppois
?pnorm
pnorm(14:16, 15, 10)
pnorm(13, 15, 10)
pnorm(16, 15, 10)
?pbino,
?pbinom
pbinom(3,5,0.5,lower.tail = FALSE)
pbinom(3,5,0.5)
ppois(20,33)
pbinom(4,6,0.5,lower.tail = FALSE)
round((ppois(20,33))*100),1)
round((ppois(20,33)*100),1)
pnorm(93, 100, 10)
round(qbinom(.95,100,10),3)
round(qbinom(95,100,10),3)
?qnorm
round(qnorm(.95,100,10),3)
round(qnorm(.95, 100, sqrt(100/50)),3)
round((pnorm(93, 100 10)))*100,1)
round((pnorm(93, 100 10))*100,1)
round(((pnorm(93, 100 10))*100),1)
round((pnorm(93, 100 10))*100),1)
round((pnorm(93, 100 10))*100),1)
round((pnorm(93, 100, 10))*100),1)
round(((pnorm(93, 100, 10))*100),1)
round((punif(.51, mean=0.5, sd=1/10*sqrt(12))),3)
round((qunif(.51, mean=0.5, sd=1/10*sqrt(12))),3)
?punif
round(pnorm(.51, mean=0.5, sd=1/10*sqrt(12), lower.tail = FALSE),3)
round(pnorm(.51, mean=0.5, sd=1/(10*sqrt(12)), lower.tail = FALSE),3)
library(XML)
data1<- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html ", useInternalNodes = T)
data1<- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html ")
data1<- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html", useInternalNodes = T)
data1
?xpathSApply
?nchar
nchar(data1,10)
data1[10]
?xpathSApply
pbinom(5:7, 8, 0.5)
qnorm(1160,1020,50)
?qnorm
pnorm(1160,1020,50)
pnorm(1160,1020,50, lower.tail = FALSE)
library(httr)
myapp = oauth_app("github", key="168fadf641afa8069767", secret="39ea733559b43a3ffd9268c1e450dce3f423ce8f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
homeTL <- GET("https://api.github.com/users/jtleek/repos", gtoken)
ab <- content(homeTL)
ab1 <- jsonlite::fromJSON(toJSON(ab))
print(ab1[1,1:4])
library(jsonlite)
gtoken <- config(token = github_token)
homeTL <- GET("https://api.github.com/users/jtleek/repos", gtoken)
ab <- content(homeTL)
ab1 <- jsonlite::fromJSON(toJSON(ab))
print(ab1[1,1:4])
class(ab1)
colnames(ab1)
ab1[ab1$name=="datasharing",]
ab1[ab1$name=="datasharing","created_at"]
load("~/Personal/Coursera/Course_3_Data_Cleaning/.RData")
setwd("~/Personal/Coursera/Course_3_Data_Cleaning")
View(meanData)
install.packages("tidyr")
library(tidyr)
install.packages("ggplot2")
gatherCol <- meanData %>% gather(Mx, Value, -Subject, -ActivityName)
View(gatherCol)
?extract
?separate
sepRowNames <- gatherCol %>% separate(Mx, c("RowNo", "MxName"), sep=" ")
View(sepRowNames)
View(meanData)
source('~/Personal/Coursera/Course_3_Data_Cleaning/CP1.r')
?arrange()
tidyData <- arrange(sepRowNames, Subject, ActivityName, MxName)
View(tidyData)
tidyData <- arrange(sepRowNames, Subject)
View(tidyData)
tidyData <- arrange(sepRowNames, Subject, ActivityName)
source('~/Personal/Coursera/Course_3_Data_Cleaning/CP1.r')
source('~/Personal/Coursera/Course_3_Data_Cleaning/CP1.r')
View(tidyData)
View(tidyData)
?write.table
write.table(tidyData, file = "./tidy_data.txt", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
?group_by
?summarize
?gather
?separate
source('~/Personal/Coursera/Course_3_Data_Cleaning/run_analysis.r')
View(tidyData)
setwd("~/Personal/Coursera/Git_Repository/CourseProj")
source('~/Personal/Coursera/Git_Repository/CourseProj/run_analysis.r')
class(tidyData)
View(tidyData)
View(tidyData)
SubjTrainTxt <- read.table("./UCI HAR Dataset/train/subject_train.txt", header=FALSE, colClasses = "numeric", comment.char = "")
setwd("~/Personal/Coursera/Course_3_Data_Cleaning")
SubjTrainTxt <- read.table("./UCI HAR Dataset/train/subject_train.txt", header=FALSE, colClasses = "numeric", comment.char = "")
source('~/Personal/Coursera/Course_3_Data_Cleaning/run_analysis.r')
View(tidyData)
setwd("~/Personal/Coursera/Course_5_Statistical_Inference")
?eval
?mean
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
View(tidyData)
View(tidyData)
unique(tidyData$MxName)
unique(tidyData$Subject)
unique(tidyData$ActivityName)
codebook(tidyData)
install.packages('memisc')
library('memisc')
codebook(tidyData)
unique(tidyData$MxName)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(means)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
10*OJSampleVarPerDose
10*OJSampleVarPerDose/(10-1)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(PerDoseData)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(PerDoseData)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(PerDoseData)
View(TGdata)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(PerDoseData)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
View(PerDoseData)
View(OJdata)
source('~/Personal/Coursera/Course_5_Statistical_Inference/ProjectQ2.r')
setwd("~/Personal/Coursera/Course_3_Data_Cleaning")
?gsub
source('~/Personal/Coursera/Course_3_Data_Cleaning/run_analysis.r')
View(tidyData)
sep <- gsub("std()", STD, tidyData$MxName)
sep <- gsub("std()", "STD"", tidyData$MxName)
sep <- gsub("std()", "STD", tidyData$MxName)
sep <- gsub("mean()", "Mean", tidyData$MxName)
sep <- gsub("mean", "Mean", tidyData$MxName)
sep <- gsub("STD", "SD", tidyData$MxName)
sep <- gsub("t", "time", tidyData$MxName)
View(VCdata)
View(tidyData)
tidyData$MxName <- gsub("std", "SD", tidyData$MxName)
View(tidyData)
source('~/Personal/Coursera/Course_3_Data_Cleaning/run_analysis.r')
View(tidyData)
source('~/Personal/Coursera/Course_3_Data_Cleaning/run_analysis.r')
View(tidyData)
unique(tidyData$MxName)
?ToothGrowth
View(tidyData)
?promptData
tidyData$ActivityLabel <- NULL  # After sorting, delete the column storing activity label in numeric form
rm(gatherCol, meanData, sepRowNames)
promptData(tidyData)
setwd("~/Personal/Coursera/Git_Repository/CourseProj")
source('~/Personal/Coursera/Git_Repository/CourseProj/run_analysis.r')
rm(sep,g)
View(tidyData)
VCdata
head(VCdata)
VCdata[1:5,1:2]
sample_var
means
VCmeanAnyDose
OJmeanAnyDose
VCdata
head(OOJOJdata)
head(OJdata)
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=TRUE)
VCSampleVarAnyDose
OJSampleVarAnyDose
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE)
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE)$conf
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=TRUE)$conf
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE,alternative="greater")$conf
t.test(OJdata$len-VCdata$len,paired = FALSE,var.equal=FALSE,alternative="greater")$conf
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE)
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE,alternative="greater")
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE,alternative="greater")$p-value
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE,alternative="greater")$p.value
OJdata
head(OJdata)
OJdata$dose
OJdata$dose ==5
OJdata$dose ==.5
OJdata(OJdata$dose ==.5,len)
OJdata[OJdata$dose ==.5,len]
OJdata$len[OJdata$dose ==.5]
VCdata$len[VCdata$dose ==.5]
c(OJdata$len[OJdata$dose ==.5],VCdata$len[VCdata$dose ==.5])
data_0.5 = c(OJdata$len[OJdata$dose ==.5],VCdata$len[VCdata$dose ==.5]);
data_1 = c(OJdata$len[OJdata$dose ==1],VCdata$len[VCdata$dose ==1]);
data_1
t.test(OJdata$len,VCdata$len,paired = FALSE,var.equal=FALSE,alternative="greater")
sample_var
t.test(data_1,data_0.5,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
data_1 = c(OJdata$len[OJdata$dose ==1],VCdata$len[VCdata$dose ==1]);
data_2 = c(OJdata$len[OJdata$dose ==2],VCdata$len[VCdata$dose ==2]);
data_1
data_2
t.test(data_2,data_1,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
sample_mean
sample_means
means
t.test(data_0.5_OJ,data_0.5_VC,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
data_0.5_OJ = OJdata$len[OJdata$dose ==0.5]
data_0.5_VC = VCdata$len[VCdata$dose ==0.5]
t.test(data_0.5_OJ,data_0.5_VC,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
means
data_1_OJ = OJdata$len[OJdata$dose ==1]
data_1_VC = VCdata$len[VCdata$dose ==1]
#Assumptions
#unpaired, sample variance of datasets is different
#Result: Since the p.value < 5%. We reject the H_0 and accept the alternative
t.test(data_1_OJ,data_1_VC,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
sample_means
means
data_2_OJ = OJdata$len[OJdata$dose ==2]
data_2_VC = VCdata$len[VCdata$dose ==2]
#Assumptions
#unpaired, sample variance of datasets is different
#Result: Since the p.value < 5%. We reject the H_0 and accept the alternative
t.test(data_2_OJ,data_2_VC,paired=FALSE,var.equal=FALSE,alternative="two.sided")$p.value
data_0.5_OJ = OJdata$len[OJdata$dose ==0.5]
data_1_OJ = OJdata$len[OJdata$dose ==1]
#Assumptions
#unpaired, sample variance of datasets is different
#Result: p_value is > 5%, so we do not reject the null hypothesis
t.test(data_1_OJ,data_0.5_OJ,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
#########Test 4 - Sub part 2
#H_0: Tooth Growth is same when OJ dose of 2.0 is given and VC does of 2.0 is given
#H_A: Tooth Growth is not same (2 tailed test)
data_1_OJ = OJdata$len[OJdata$dose ==1]
data_2_OJ = OJdata$len[OJdata$dose ==2]
#Assumptions
#unpaired, sample variance of datasets is different
#Result: p_value is < 5%, null hypothesis is rejected
t.test(data_2_OJ,data_1_OJ,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
means
#########Test 4 - Sub part 3
#H_0: Tooth Growth is same when OJ dose of 2.0 is given and VC does of 2.0 is given
#H_A: Tooth Growth is not same (2 tailed test)
data_0.5_VC = VCdata$len[VCdata$dose ==0.5]
data_1_VC = VCdata$len[VCdata$dose ==1]
#Assumptions
#unpaired, sample variance of datasets is different
#Result: p_value is < 5%, null hypothesis is rejected
t.test(data_1_VC,data_0.5_VC,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
data_1_VC = VCdata$len[VCdata$dose ==1]
data_2_VC = VCdata$len[VCdata$dose ==2]
#Assumptions
#unpaired, sample variance of datasets is different
#Result: p_value is < 5%, null hypothesis is rejected
t.test(data_2_VC,data_1_VC,paired=FALSE,var.equal=FALSE,alternative="greater")$p.value
